if (isModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    resourcePrefix "contact_"

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        if (isModule.toBoolean()) {
            applicationId "com.qs.contact"
        }

        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
                arguments = [
                        AROUTER_MODULE_NAME  : project.getName(),
                        moduleName           : project.getName(),
                        //指定room.schemaLocation生成的文件路径
                        "room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

    }
    sourceSets {
        main {
            if (isModule.toBoolean()) {
                manifest.srcFile 'src/MAIN/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/MAIN/AndroidManifest.xml'
                // 集成开发模式下排除 debug 文件夹中的所有 Java 文件
                java {
                    exclude 'module/**'
                }
            }
        }
    }

    buildTypes {

        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            minifyEnabled true
            if (isModule.toBoolean()) {
                shrinkResources true
            }
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }
}

buildscript {
    repositories {
        jcenter()
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // test
    api rootProject.ext.dependencies["timber"]
    testImplementation rootProject.ext.dependencies["junit"]
    debugApi rootProject.ext.dependencies["canary-debug"]
    releaseApi rootProject.ext.dependencies["canary-release"]
    testImplementation rootProject.ext.dependencies["canary-release"]

    // module
    api project(':lib_base')

    //view
    annotationProcessor(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'support-annotations'
    }
    annotationProcessor(rootProject.ext.dependencies["arouter-compiler"]) {
        exclude module: 'support-annotations'
    }

    // room
    annotationProcessor(rootProject.ext.dependencies["room-compiler"]) {
        exclude module: 'support-annotations'
    }

    // dagger
    annotationProcessor(rootProject.ext.dependencies["dagger-compiler"]) {
        exclude module: 'support-annotations'
    }
}
